package reverse_linked_2

import (
	"fmt"
	"github.com/stretchr/testify/assert"
	"testing"
)

func unbuild(l *ListNode) []int {
	out := make([]int, 0)

	out = append(out, l.Val)

	for l.Next != nil {
		l = l.Next
		out = append(out, l.Val)
	}
	return out
}

func build(l []int) *ListNode {
	prev := &ListNode{
		Val:  l[0],
		Next: nil,
	}

	if len(l) == 1 {
		return prev
	}
	head := prev

	for i := 1; i < len(l); i++ {
		curr := &ListNode{
			Val:  l[i],
			Next: nil,
		}
		prev.Next = curr
		prev = curr
	}

	return head
}

func TestReverse(t *testing.T) {

	tests := []struct {
		head        []int
		left, right int
		expected    []int
	}{
		{
			head:     []int{1, 2, 3, 4, 5},
			left:     2,
			right:    4,
			expected: []int{1, 4, 3, 2, 5},
		},
		{
			head:     []int{5},
			left:     1,
			right:    1,
			expected: []int{5},
		},
		{
			head:     []int{1, 2},
			left:     1,
			right:    1,
			expected: []int{1, 2},
		},
		{
			head:     []int{1, 2},
			left:     1,
			right:    2,
			expected: []int{2, 1},
		},
		{
			head:     []int{1, 2, 3},
			left:     1,
			right:    3,
			expected: []int{3, 2, 1},
		},
		{
			head:     []int{1, 2, 3, 4},
			left:     1,
			right:    3,
			expected: []int{3, 2, 1, 4},
		},
		{
			head:     []int{1, 2, 3, 4},
			left:     2,
			right:    4,
			expected: []int{1, 4, 3, 2},
		},
		{
			head:     []int{-18, -29, 30, 10, -45, -93, 9, -4, -52, 91, 61, 91, 19, 32, -100, 34, 38, 99, -93, -37, 73, -67, -29, 52, 6, -50, -87, -33, 6, -72, 72, 89, -51, -48, -52, -45, -41, 7, 1, -42, -3, -38, -52, 66, 44, 99, 0, -19, 47, 7, 44, 19, -10, 65, -30, 96, -86, -17, -87, -29, -39, 85, -41, -39, 87, -43, -34, -54, 65, 67, 4, -39, 79, 2, -73, 23, 0, -23, 54, 97, 34, -2, -35, -77, -88, -14, 69, 78, 19, 82, -52, 81, 17, -43, 92, 3, 14, -43, 49, -22, 74, -98, -10, 53, 4, -33, -75, 54, 44, 79, 50, -73, -74, 66, -50, -61, -49, -82, -84, 70, -100, -86, 0, 17, -29, -59, 70, 85, -2, 19, -87, -78, -29, -47, 75, 26, -30, 100, -21, 64, 28, 80, 91, 55, 45, -60, 94, 46, -42, 60, 15, -92, 74, -85, -25, -56, -44, -55, 79, 5, 14, 42, -23, 35, 95, -49, -40, -86, -100, -10, 78, 28, -31, 68, -18, 64, -93, -75, -41, -84, 85, 74, 75, 8, 39, -100, 2, 46, 96, -69, -100, -41, 73, -23, 94, 18, -22, -46, 32, -22, 44, 10, 56, 63, -23, 89, -24, -65, -87, 35, -99, 49, 8, 76, -44, 98, 26, 9, 43, 21, 40, -7, 80, 12, 70, 74, 80, -53, -73, 12, -25, 21, 72, -70, -17, -52, -82, 59, -67, 83, -7, -66, 31, 51, 61, 37, 48, -14, -55, -60, 58, 85, 33, 37, -53, -48, -40, -74, -51, -63, -12, 24, 58, -41, 5, 91, -42, -27, 49, -9, -95, 92, -24, 36, -7, 87, -77, 91, -78, -82, 82, 80, 54, -36, -33, -100, 17, 27, 77, 16, 65, -35, -60, -28, 24, -5, -37, 82, 18, 62, -77, 24, 4, -1, -41},
			left:     209,
			right:    286,
			expected: []int{-18, -29, 30, 10, -45, -93, 9, -4, -52, 91, 61, 91, 19, 32, -100, 34, 38, 99, -93, -37, 73, -67, -29, 52, 6, -50, -87, -33, 6, -72, 72, 89, -51, -48, -52, -45, -41, 7, 1, -42, -3, -38, -52, 66, 44, 99, 0, -19, 47, 7, 44, 19, -10, 65, -30, 96, -86, -17, -87, -29, -39, 85, -41, -39, 87, -43, -34, -54, 65, 67, 4, -39, 79, 2, -73, 23, 0, -23, 54, 97, 34, -2, -35, -77, -88, -14, 69, 78, 19, 82, -52, 81, 17, -43, 92, 3, 14, -43, 49, -22, 74, -98, -10, 53, 4, -33, -75, 54, 44, 79, 50, -73, -74, 66, -50, -61, -49, -82, -84, 70, -100, -86, 0, 17, -29, -59, 70, 85, -2, 19, -87, -78, -29, -47, 75, 26, -30, 100, -21, 64, 28, 80, 91, 55, 45, -60, 94, 46, -42, 60, 15, -92, 74, -85, -25, -56, -44, -55, 79, 5, 14, 42, -23, 35, 95, -49, -40, -86, -100, -10, 78, 28, -31, 68, -18, 64, -93, -75, -41, -84, 85, 74, 75, 8, 39, -100, 2, 46, 96, -69, -100, -41, 73, -23, 94, 18, -22, -46, 32, -22, 44, 10, 56, 63, -23, 89, -24, -65, -100, -33, -36, 54, 80, 82, -82, -78, 91, -77, 87, -7, 36, -24, 92, -95, -9, 49, -27, -42, 91, 5, -41, 58, 24, -12, -63, -51, -74, -40, -48, -53, 37, 33, 85, 58, -60, -55, -14, 48, 37, 61, 51, 31, -66, -7, 83, -67, 59, -82, -52, -17, -70, 72, 21, -25, 12, -73, -53, 80, 74, 70, 12, 80, -7, 40, 21, 43, 9, 26, 98, -44, 76, 8, 49, -99, 35, -87, 17, 27, 77, 16, 65, -35, -60, -28, 24, -5, -37, 82, 18, 62, -77, 24, 4, -1, -41},
		},
	}

	for i, tt := range tests {
		t.Run(fmt.Sprintf("case_%d", i), func(t *testing.T) {
			headL := build(tt.head)
			reversed := reverseBetween(headL, tt.left, tt.right)
			actual := unbuild(reversed)
			assert.Equal(t, tt.expected, actual)
		})
	}
}
